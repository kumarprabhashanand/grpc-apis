// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: greet_user_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetUserServiceClient is the client API for GreetUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetUserServiceClient interface {
	GreetUser_Unary(ctx context.Context, in *GreetUserRequest, opts ...grpc.CallOption) (*GreetUserResponse, error)
	GreetUser_ServerStreaming(ctx context.Context, in *GreetUserRequest, opts ...grpc.CallOption) (GreetUserService_GreetUser_ServerStreamingClient, error)
	GreetUser_ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (GreetUserService_GreetUser_ClientStreamingClient, error)
	GreetUser_BiDirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (GreetUserService_GreetUser_BiDirectionalStreamingClient, error)
}

type greetUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetUserServiceClient(cc grpc.ClientConnInterface) GreetUserServiceClient {
	return &greetUserServiceClient{cc}
}

func (c *greetUserServiceClient) GreetUser_Unary(ctx context.Context, in *GreetUserRequest, opts ...grpc.CallOption) (*GreetUserResponse, error) {
	out := new(GreetUserResponse)
	err := c.cc.Invoke(ctx, "/com.grpc.api.example.GreetUserService/GreetUser_Unary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetUserServiceClient) GreetUser_ServerStreaming(ctx context.Context, in *GreetUserRequest, opts ...grpc.CallOption) (GreetUserService_GreetUser_ServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetUserService_ServiceDesc.Streams[0], "/com.grpc.api.example.GreetUserService/GreetUser_ServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetUserServiceGreetUser_ServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetUserService_GreetUser_ServerStreamingClient interface {
	Recv() (*GreetUserResponse, error)
	grpc.ClientStream
}

type greetUserServiceGreetUser_ServerStreamingClient struct {
	grpc.ClientStream
}

func (x *greetUserServiceGreetUser_ServerStreamingClient) Recv() (*GreetUserResponse, error) {
	m := new(GreetUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetUserServiceClient) GreetUser_ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (GreetUserService_GreetUser_ClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetUserService_ServiceDesc.Streams[1], "/com.grpc.api.example.GreetUserService/GreetUser_ClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetUserServiceGreetUser_ClientStreamingClient{stream}
	return x, nil
}

type GreetUserService_GreetUser_ClientStreamingClient interface {
	Send(*GreetUserRequest) error
	CloseAndRecv() (*GreetUserResponse, error)
	grpc.ClientStream
}

type greetUserServiceGreetUser_ClientStreamingClient struct {
	grpc.ClientStream
}

func (x *greetUserServiceGreetUser_ClientStreamingClient) Send(m *GreetUserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetUserServiceGreetUser_ClientStreamingClient) CloseAndRecv() (*GreetUserResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GreetUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetUserServiceClient) GreetUser_BiDirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (GreetUserService_GreetUser_BiDirectionalStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetUserService_ServiceDesc.Streams[2], "/com.grpc.api.example.GreetUserService/GreetUser_BiDirectionalStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetUserServiceGreetUser_BiDirectionalStreamingClient{stream}
	return x, nil
}

type GreetUserService_GreetUser_BiDirectionalStreamingClient interface {
	Send(*GreetUserRequest) error
	Recv() (*GreetUserResponse, error)
	grpc.ClientStream
}

type greetUserServiceGreetUser_BiDirectionalStreamingClient struct {
	grpc.ClientStream
}

func (x *greetUserServiceGreetUser_BiDirectionalStreamingClient) Send(m *GreetUserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetUserServiceGreetUser_BiDirectionalStreamingClient) Recv() (*GreetUserResponse, error) {
	m := new(GreetUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetUserServiceServer is the server API for GreetUserService service.
// All implementations must embed UnimplementedGreetUserServiceServer
// for forward compatibility
type GreetUserServiceServer interface {
	GreetUser_Unary(context.Context, *GreetUserRequest) (*GreetUserResponse, error)
	GreetUser_ServerStreaming(*GreetUserRequest, GreetUserService_GreetUser_ServerStreamingServer) error
	GreetUser_ClientStreaming(GreetUserService_GreetUser_ClientStreamingServer) error
	GreetUser_BiDirectionalStreaming(GreetUserService_GreetUser_BiDirectionalStreamingServer) error
	mustEmbedUnimplementedGreetUserServiceServer()
}

// UnimplementedGreetUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetUserServiceServer struct {
}

func (UnimplementedGreetUserServiceServer) GreetUser_Unary(context.Context, *GreetUserRequest) (*GreetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GreetUser_Unary not implemented")
}
func (UnimplementedGreetUserServiceServer) GreetUser_ServerStreaming(*GreetUserRequest, GreetUserService_GreetUser_ServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetUser_ServerStreaming not implemented")
}
func (UnimplementedGreetUserServiceServer) GreetUser_ClientStreaming(GreetUserService_GreetUser_ClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetUser_ClientStreaming not implemented")
}
func (UnimplementedGreetUserServiceServer) GreetUser_BiDirectionalStreaming(GreetUserService_GreetUser_BiDirectionalStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetUser_BiDirectionalStreaming not implemented")
}
func (UnimplementedGreetUserServiceServer) mustEmbedUnimplementedGreetUserServiceServer() {}

// UnsafeGreetUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetUserServiceServer will
// result in compilation errors.
type UnsafeGreetUserServiceServer interface {
	mustEmbedUnimplementedGreetUserServiceServer()
}

func RegisterGreetUserServiceServer(s grpc.ServiceRegistrar, srv GreetUserServiceServer) {
	s.RegisterService(&GreetUserService_ServiceDesc, srv)
}

func _GreetUserService_GreetUser_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetUserServiceServer).GreetUser_Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.grpc.api.example.GreetUserService/GreetUser_Unary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetUserServiceServer).GreetUser_Unary(ctx, req.(*GreetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetUserService_GreetUser_ServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GreetUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetUserServiceServer).GreetUser_ServerStreaming(m, &greetUserServiceGreetUser_ServerStreamingServer{stream})
}

type GreetUserService_GreetUser_ServerStreamingServer interface {
	Send(*GreetUserResponse) error
	grpc.ServerStream
}

type greetUserServiceGreetUser_ServerStreamingServer struct {
	grpc.ServerStream
}

func (x *greetUserServiceGreetUser_ServerStreamingServer) Send(m *GreetUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GreetUserService_GreetUser_ClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetUserServiceServer).GreetUser_ClientStreaming(&greetUserServiceGreetUser_ClientStreamingServer{stream})
}

type GreetUserService_GreetUser_ClientStreamingServer interface {
	SendAndClose(*GreetUserResponse) error
	Recv() (*GreetUserRequest, error)
	grpc.ServerStream
}

type greetUserServiceGreetUser_ClientStreamingServer struct {
	grpc.ServerStream
}

func (x *greetUserServiceGreetUser_ClientStreamingServer) SendAndClose(m *GreetUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetUserServiceGreetUser_ClientStreamingServer) Recv() (*GreetUserRequest, error) {
	m := new(GreetUserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreetUserService_GreetUser_BiDirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetUserServiceServer).GreetUser_BiDirectionalStreaming(&greetUserServiceGreetUser_BiDirectionalStreamingServer{stream})
}

type GreetUserService_GreetUser_BiDirectionalStreamingServer interface {
	Send(*GreetUserResponse) error
	Recv() (*GreetUserRequest, error)
	grpc.ServerStream
}

type greetUserServiceGreetUser_BiDirectionalStreamingServer struct {
	grpc.ServerStream
}

func (x *greetUserServiceGreetUser_BiDirectionalStreamingServer) Send(m *GreetUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetUserServiceGreetUser_BiDirectionalStreamingServer) Recv() (*GreetUserRequest, error) {
	m := new(GreetUserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetUserService_ServiceDesc is the grpc.ServiceDesc for GreetUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.grpc.api.example.GreetUserService",
	HandlerType: (*GreetUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GreetUser_Unary",
			Handler:    _GreetUserService_GreetUser_Unary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GreetUser_ServerStreaming",
			Handler:       _GreetUserService_GreetUser_ServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GreetUser_ClientStreaming",
			Handler:       _GreetUserService_GreetUser_ClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GreetUser_BiDirectionalStreaming",
			Handler:       _GreetUserService_GreetUser_BiDirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "greet_user_service.proto",
}
